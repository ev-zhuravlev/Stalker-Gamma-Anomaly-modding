local weight_unit = game.translate_string("st_kg")

local function move_wnd(wnd, distance)
	local wnd_pos = wnd:GetWndPos()
	wnd_pos.x = wnd_pos.x + distance
	wnd:SetWndPos(wnd_pos)
end

local function is_trader_object_hidden(obj, trade_profile)
	local s = utils_item.get_item_trade_status(obj, trade_profile)
	return s == 3 or s == nil
end

local function display_weight_of_category(npc, inv, ui_inv)
	if not npc then return end

	local is_actor = npc:id() == AC_ID
	local is_trader = not is_actor and ui_inv.mode == "trade"
	local is_npc = not is_actor and not is_trader and not ui_inv.npc_is_box
	local is_box = not is_actor and not is_trader and ui_inv.npc_is_box

	local pkind = ui_inv.possible_kind
	local is_all = pkind["s_all"]
	if is_all and not is_trader then
		return 
	end
	
	local tot_weight = 0
	local cat_weight = 0
	local trade_profile

	if is_trader then
		trade_profile = ui_inv.CC["npc_trade"].trade_profile
	end

	if is_box then
		npc:iterate_inventory_box( function(owner,itm)
			tot_weight = tot_weight + itm:weight()
		end)			
	else
		if not ui_inv:IsInvOwner(npc) then
			return
		end
		if is_trader then
			npc:iterate_ruck( function(temp, item)
				if not is_trader_object_hidden(item, trade_profile) then
					tot_weight = tot_weight + item:weight()
				end
			end)
		else
			tot_weight = npc:get_total_weight()
		end
	end

	if is_all then -- updating only total weight for a trader
		ui_inv.npc_weight:SetText( round_idp(tot_weight,1) .. " " .. weight_unit )
		return
	end
	
	for id, item in pairs(inv) do
		local is_hidden = is_trader and is_trader_object_hidden(item, trade_profile)

		if not is_hidden then
			cat_weight = cat_weight + item:weight()
		end
	end	

	-- Note: this also removes the space between total weight and kg
	local text = strformat("[%s] %s%s", round_idp(cat_weight, 1), round_idp(tot_weight,1), weight_unit)
	if is_actor then
		ui_inv.player_weight:SetText( text )
	else
		ui_inv.npc_weight:SetText( text )
	end
end
function on_game_start()
	local inv_ini = ui_inventory.UIInventory.InitControls
	function ui_inventory.UIInventory.InitControls(self)
		inv_ini(self)
		move_wnd(self.player_weight_cap, -20)
		move_wnd(self.player_weight, -8)
		move_wnd(self.npc_weight_cap, -20)
		move_wnd(self.npc_weight, -8)
	end

	local base_parse = ui_inventory.UIInventory.ParseInventory
	function ui_inventory.UIInventory.ParseInventory(self, npc, all, id_list, ignore_kind)
		local inv = base_parse(self, npc, all, id_list, ignore_kind)

		display_weight_of_category(npc, inv, self)

		return inv
	end

	local base_companion_parse = ui_inventory.UIInventory.ParseInventory_Companion
	function ui_inventory.UIInventory.ParseInventory_Companion(self, npc, id_list, ignore_kind)
		local inv = base_companion_parse(self, npc, id_list, ignore_kind)

		display_weight_of_category(npc, inv, self)

		return inv
	end
end